{"version":3,"sources":["serviceWorker.js","components/Char.js","components/CharList.js","components/CharInput.js","components/NavBar.js","components/Hint.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Char","props","className","char","CharList","charsToRead","charsArrayDisplay","map","user","i","Grid","item","container","direction","justify","alignItems","spacing","CharInput","Input","placeholder","inputProps","NavBar","AppBar","position","Toolbar","Typography","variant","color","useStyles","makeStyles","root","maxWidth","Hint","classes","Card","CardActionArea","CardMedia","component","alt","height","image","title","CardContent","gutterBottom","CardActions","Button","size","romaji","App","Paper","elevation","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gBCNSC,EATF,SAACC,GACV,OACI,yBAAKC,UAAY,0DACb,wBAAIA,UAAU,QACbD,EAAME,Q,QCiBJC,EApBE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACTC,EAAoBD,EAAYE,KAAI,SAACC,EAAMC,GAC7C,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,EAAD,CAAMR,KAAME,EAAYI,GAAGN,WAIvC,OACI,kBAACO,EAAA,EAAD,CACIE,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,QAAU,KACLV,I,QCTFW,EANG,WACd,OACQ,kBAACC,EAAA,EAAD,CAAOC,YAAY,uBAAuBC,WAAY,CAAE,aAAc,kB,wBCYnEC,EAbA,WACX,OACI,6BACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,WAAlC,+B,wDCcVC,EAAYC,YAAW,CACzBC,KAAM,CACJC,SAAU,OAIC,SAASC,IACtB,IAAMC,EAAUL,IAEhB,OACE,kBAACM,EAAA,EAAD,CAAMhC,UAAW+B,EAAQH,MACvB,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,IAAI,wBACJC,OAAO,MACPC,MAAM,qXACNC,MAAM,0BAER,kBAACC,EAAA,EAAD,KACE,kBAACjB,EAAA,EAAD,CAAYkB,cAAY,EAACjB,QAAQ,KAAKW,UAAU,MAAhD,UAGA,kBAACZ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBU,UAAU,KAA5D,sCAKJ,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQnB,MAAM,WAA3B,SAGA,kBAACkB,EAAA,EAAD,CAAQC,KAAK,QAAQnB,MAAM,WAA3B,gB,YChDNtB,EAAc,CAAC,CACfF,KAAK,SACL4C,OAAO,IACR,CACC5C,KAAK,SACL4C,OAAO,IAEX,CACI5C,KAAK,SACL4C,OAAO,IAEX,CACI5C,KAAK,SACL4C,OAAO,IAEX,CACI5C,KAAK,SACL4C,OAAO,IAEX,CACI5C,KAAK,SACL4C,OAAO,KA4BIC,EAxBH,WACR,OACI,yBAAK9C,UAAU,MACX,kBAAC,EAAD,MACA,kBAACQ,EAAA,EAAD,CAAME,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,UAC/D,kBAACkC,EAAA,EAAD,CAAOC,UAAW,IACd,wDACA,kBAAC,EAAD,MACA,kBAACxC,EAAA,EAAD,CAAME,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,UAC3D,kBAACL,EAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,EAAD,CAAUN,YAAaA,KAE3B,kBAACK,EAAA,EAAD,CAAMC,MAAI,GACV,kBAACsC,EAAA,EAAD,CAAOC,UAAa,IAChB,kBAAClB,EAAD,WCtCxBmB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f0be804b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport '../containers/App.css'\n\nconst Char = (props) => {\n    return(\n        <div className = \"tmw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\">\n            <h1 className='char'>\n            {props.char}</h1>\n        </div>\n    )\n}\n\nexport default Char","import React from 'react'\nimport Char from './Char.js'\nimport { Grid } from '@material-ui/core'\n\nconst CharList = ({charsToRead}) => {\n    const charsArrayDisplay = charsToRead.map((user, i) =>{\n        return(\n            <Grid item>\n                <Char char={charsToRead[i].char}/>\n            </Grid>\n        ) \n    })\n    return(\n        <Grid \n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n            spacing = \"1\">\n                {charsArrayDisplay}\n        </Grid>    \n    )\n}\n\nexport default CharList","import React from 'react';\nimport '../containers/App.css'\nimport {Input} from '@material-ui/core'\n\nconst CharInput = () => { \n    return (\n            <Input placeholder=\"Start typing here...\" inputProps={{ 'aria-label': 'description' }} />\n    )\n}\n\nexport default CharInput","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nconst NavBar = () => {\n    return(\n        <div>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"title\" color=\"inherit\">\n                    Learn Hiragana Non-stop\n                </Typography>\n            </Toolbar>\n        </AppBar>\n        </div>\n    )\n}\nexport default NavBar;","import React from 'react';\nimport {mnemonics} from '../mnemonics.js'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\n//original component\n// const Hint = () =>{\n//     return(\n//         <div className = \"mw5 center bg-white br3 pa3 ba b--black-10\">\n//             <img alt ='character mnemonic' width=\"200\" height=\"200\" src=''/>\n//             <div>\n//                 <hr className=\"mw3 bb bw1 b--black-10\"></hr>\n//                 <p>This will be a brief explanation</p>\n//             </div>\n//         </div>\n//     );\n// }\n\nconst useStyles = makeStyles({\n    root: {\n      maxWidth: 200,\n    },\n  });\n  \n  export default function Hint() {\n    const classes = useStyles();\n  \n    return (\n      <Card className={classes.root}>\n        <CardActionArea>\n          <CardMedia\n            component=\"img\"\n            alt=\"Contemplative Reptile\"\n            height=\"200\"\n            image=\"https://images.squarespace-cdn.com/content/v1/5b3df7a2e2ccd1a90cd980f8/1586264092269-PH3K138MDDNEYO3WN8JA/ke17ZwdGBToddI8pDm48kEpVg-ILAPna1wRh-xAJ9fRZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpwEv36x-EUL2-BSQ5feDhwGCbXuJBFqZ-erYzVouT8yOb9TwqchglLQOCYTRn7ZGxI/Fran+Wrigley+Japanese+Lessons+Learn+Japanese+Online+Learn+Hiragana+Katakana+Mnemonics+4.jpeg\"\n            title=\"Contemplative Reptile\"\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              Lizard\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                This will be a brief explanation\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button size=\"small\" color=\"primary\">\n            Share\n          </Button>\n          <Button size=\"small\" color=\"primary\">\n            Learn More\n          </Button>\n        </CardActions>\n      </Card>\n    );\n  }","import React from 'react';\nimport CharList from '../components/CharList.js';\nimport CharInput from '../components/CharInput';\nimport NavBar from '../components/NavBar';\nimport Hint from '../components/Hint'\nimport {Grid, Paper} from '@material-ui/core';\nimport './App.css'\n\nvar charsToRead = [{\n    char:'あ',\n    romaji:''\n}, {\n    char:'い',\n    romaji:''\n},\n{\n    char:'た',\n    romaji:''\n},\n{\n    char:'な',\n    romaji:''\n},\n{\n    char:'さ',\n    romaji:''\n},\n{\n    char:'ち',\n    romaji:''\n},\n]\n\nconst App = () => {\n    return (\n        <div className='tc'>\n            <NavBar/>\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <Paper elevation={0}/>\n                <h1>Learn Hiragana on the go</h1>\n                <CharInput/>\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                    <Grid item>\n                        <CharList charsToRead={charsToRead}/>\n                    </Grid>\n                    <Grid item>\n                    <Paper elevation = {1}/>\n                        <Hint/>\n                    </Grid>\n                </Grid>\n                \n            </Grid>\n            \n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App.js'\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}